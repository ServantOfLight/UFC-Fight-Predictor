dim(UFC_Original)
UFC_Main <- UFC_Original[, c(3, 4, 10, 13:25, 27:31, 33:36, 38:48, 50:54, 56:59, 61, 62, 78, 108, 109, 111, 70:77)]
#include 12 if you want weight class
dim(UFC_Main)
sum(is.na(UFC_Main)) #less than 3 percent of data is missing
null_Percentage <- sapply(UFC_Main, function(x) sum(is.na(x))/length(x))*100
null_Columns <- null_Percentage[null_Percentage > 0]
null_df <- as.data.frame(null_Columns)
ggplot(null_df, aes(x = rownames(null_df), y = null_df[,1])) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Columns with null values") +
ylab("Percent of column that is null")
null_Columns #these are the columns that have null values
nullValues <- apply(UFC_Main, 1, function(x) sum(is.na(x)))
filteredUFC <- UFC_Main[nullValues < 10, ]
sum(is.na(filteredUFC))
# Impute missing values
UFC_NoNull <- filteredUFC %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)),
across(where(is.factor), ~ ifelse(is.na(.), as.factor(get_mode(.)), .)))
sum(is.na(UFC_NoNull))
UFC_numeric <- select_if(UFC_NoNull, is.numeric)
UFC_cor <- cor(UFC_numeric)
corr_simple <- function(data=df,sig=0.5){
UFC_cor[lower.tri(UFC_cor,diag=TRUE)] <- NA
UFC_cor[UFC_cor == 1] <- NA
UFC_cor <- as.data.frame(as.table(UFC_cor))
UFC_cor <- na.omit(UFC_cor)
UFC_cor <- subset(UFC_cor, abs(Freq) > sig)
UFC_cor <- UFC_cor[order(-abs(UFC_cor$Freq)),]
print(UFC_cor)
UFC_cormx <- reshape2::acast(UFC_cor, Var1~Var2, value.var="Freq")
corrplot(UFC_cormx, is.corr=FALSE, tl.col="black", na.label=" ")
}
corr_simple()
ggplot(UFC_NoNull, aes(x = Winner)) +
geom_bar() +
geom_text(aes(label=..count..),stat='count',position=position_dodge(0.9),vjust=-0.2)
#Another critical thing to note is that the red corner is traditionally reserved for the favored opponent while blue is for the underdog.
set.seed(1)
UFC_Split <- initial_split(UFC_Main, strata = "Winner")
UFC_Train <- training(UFC_Split)
UFC_Test <- testing(UFC_Split)
UFC_Folds <- vfold_cv(UFC_Train, v = 5, strata = "Winner")
UFC_Recipe <- recipe(Winner ~ ., data = UFC_Train) %>%
step_impute_linear(R_odds, B_avg_SIG_STR_landed, B_avg_SIG_STR_pct, B_avg_SUB_ATT, B_avg_TD_landed, B_avg_TD_pct, R_avg_SIG_STR_landed, R_avg_SIG_STR_pct, R_avg_SUB_ATT, R_avg_TD_landed, R_avg_TD_pct, finish_round) %>%
step_dummy(gender, B_Stance, R_Stance, better_rank, finish) %>%
step_interact(~ R_odds:B_odds) %>%
step_interact(~ B_total_rounds_fought:B_wins) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
load("UFC_Logistic_Fit.rda")
load("UFC_SVM_Fit.rda")
load("UFC_RF_Fit.rda")
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), learn_rate = tune(), penalty = tune() epochs = tune()) %>%
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), learn_rate = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
learn_rate(range = c(0, 1)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500))
levels = 5
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), learn_rate = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
learn_rate(range = c(0, 1)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune,
)
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), learn_rate = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
learn_rate(range = c(0, 1)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune
)
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune,
)
save(UFC_NN_Fit, file = "UFC_NN_Fit.rda")
arrange(filter(collect_metrics(UFC_NN_Fit), .metric == "roc_auc"), mean)
library(keras) #For Neural Network model
library(reticulate) #For Neural Network Model
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune,
)
save(UFC_NN_Fit, file = "UFC_NN_Fit.rda")
arrange(filter(collect_metrics(UFC_NN_Fit), .metric == "roc_auc"), mean)
library(reticulate) #For Neural Network Model
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune,
)
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune,
)
save(UFC_NN_Fit, file = "UFC_NN_Fit.rda")
arrange(filter(collect_metrics(UFC_NN_Fit), .metric == "roc_auc"), mean)
show_notes(.Last.tune.result)
knitr::opts_chunk$set(echo = TRUE)
install_tensorflow()
use_condaenv("r-tensorflow")
use_python("C:/Users/Angel/AppData/Local/Programs/Python/Python310/python.exe")
install.packages("reticulate")
library(reticulate) #For Neural Network Model
use_python("C:/Users/Angel/AppData/Local/Programs/Python/Python310/python.exe")
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
#List of libraries/packages used
library(tidyverse) #Main one
library(tidymodels) #Main one
library(dplyr) #for more R functionality
library(caret) #More R functionality
library(ggplot2) #for plotting
library(corrplot) #For correlation matrix
library(kableExtra) #for scrolling feature on tables when knit
library(parsnip)#helps run models
library(discrim)#helps run models
library(randomForest) #For Random Forest Model
library(xgboost) #For Boosted Tree Model
library(keras) #For Neural Network Model
library(reticulate) #For Neural Network Model
use_python("C:/Users/Angel/AppData/Local/Programs/Python/Python310/python.exe")
#library(naniar) #Professor reccommended
#library(janitor) #Professor reccommended
#library(pROC) #To create ROC curve
#library(mlr) #Fills in null values
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune,
)
save(UFC_NN_Fit, file = "UFC_NN_Fit.rda")
arrange(filter(collect_metrics(UFC_NN_Fit), .metric == "roc_auc"), mean)
library(keras) #For Neural Network Model
install_tensorflow()
reticulate::py_config()
install_tensorflow()
install.packages("keras")
install.packages("keras")
knitr::opts_chunk$set(echo = TRUE)
library(keras) #For Neural Network Model
install_tensorflow()
tensorflow::install_tensorflow()
install.packages('tensorflow')
install.packages("tensorflow")
knitr::opts_chunk$set(echo = TRUE)
library(tensorflow)
#List of libraries/packages used
library(tidyverse) #Main one
library(tidymodels) #Main one
library(dplyr) #for more R functionality
library(caret) #More R functionality
library(ggplot2) #for plotting
library(corrplot) #For correlation matrix
library(kableExtra) #for scrolling feature on tables when knit
library(parsnip)#helps run models
library(discrim)#helps run models
library(randomForest) #For Random Forest Model
library(xgboost) #For Boosted Tree Model
library(keras) #For Neural Network Model
library(tensorflow)
library(reticulate) #For Neural Network Model
use_python("C:/Users/Angel/AppData/Local/Programs/Python/Python310/python.exe")
#library(naniar) #Professor reccommended
#library(janitor) #Professor reccommended
#library(pROC) #To create ROC curve
#library(mlr) #Fills in null values
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune,
)
save(UFC_NN_Fit, file = "UFC_NN_Fit.rda")
arrange(filter(collect_metrics(UFC_NN_Fit), .metric == "roc_auc"), mean)
install_tensorflow()
knitr::opts_chunk$set(echo = TRUE)
#List of libraries/packages used
library(tidyverse) #Main one
library(tidymodels) #Main one
library(dplyr) #for more R functionality
library(caret) #More R functionality
library(ggplot2) #for plotting
library(corrplot) #For correlation matrix
library(kableExtra) #for scrolling feature on tables when knit
library(parsnip)#helps run models
library(discrim)#helps run models
library(randomForest) #For Random Forest Model
library(xgboost) #For Boosted Tree Model
library(keras) #For Neural Network Model
library(tensorflow)
install_tensorflow()
#List of libraries/packages used
library(tidyverse) #Main one
library(tidymodels) #Main one
library(dplyr) #for more R functionality
library(caret) #More R functionality
library(ggplot2) #for plotting
library(corrplot) #For correlation matrix
library(kableExtra) #for scrolling feature on tables when knit
library(parsnip)#helps run models
library(discrim)#helps run models
library(randomForest) #For Random Forest Model
library(xgboost) #For Boosted Tree Model
library(keras) #For Neural Network Model
library(tensorflow)
install_tensorflow()
#List of libraries/packages used
library(tidyverse) #Main one
library(tidymodels) #Main one
library(dplyr) #for more R functionality
library(caret) #More R functionality
library(ggplot2) #for plotting
library(corrplot) #For correlation matrix
library(kableExtra) #for scrolling feature on tables when knit
library(parsnip)#helps run models
library(discrim)#helps run models
library(randomForest) #For Random Forest Model
library(xgboost) #For Boosted Tree Model
library(keras) #For Neural Network Model
library(tensorflow)
library(reticulate) #For Neural Network Model
use_condaenv("Pstat131_UFC_Environment")
#List of libraries/packages used
library(tidyverse) #Main one
library(tidymodels) #Main one
library(dplyr) #for more R functionality
library(caret) #More R functionality
library(ggplot2) #for plotting
library(corrplot) #For correlation matrix
library(kableExtra) #for scrolling feature on tables when knit
library(parsnip)#helps run models
library(discrim)#helps run models
library(randomForest) #For Random Forest Model
library(xgboost) #For Boosted Tree Model
library(keras) #For Neural Network Model
library(tensorflow)
library(reticulate) #For Neural Network Model
use_condaenv(condaenv = "Pstat131_UFC_Environment", conda = "C:\Users\Angel\anaconda3\Scripts\conda.exe")
#List of libraries/packages used
library(tidyverse) #Main one
library(tidymodels) #Main one
library(dplyr) #for more R functionality
library(caret) #More R functionality
library(ggplot2) #for plotting
library(corrplot) #For correlation matrix
library(kableExtra) #for scrolling feature on tables when knit
library(parsnip)#helps run models
library(discrim)#helps run models
library(randomForest) #For Random Forest Model
library(xgboost) #For Boosted Tree Model
library(keras) #For Neural Network Model
library(tensorflow)
library(reticulate) #For Neural Network Model
use_condaenv(condaenv = "Pstat131_UFC_Environment", conda = "C:/Users/Angel/anaconda3/Scripts/conda.exe")
#library(naniar) #Professor reccommended
#library(janitor) #Professor reccommended
#library(pROC) #To create ROC curve
#library(mlr) #Fills in null values
UFC_NN_Spec <- mlp(mode = "classification", hidden_units = tune(), penalty = tune(), epochs = tune()) %>%
set_engine("keras")
UFC_NN_Workflow <- workflow() %>%
add_model(UFC_NN_Spec) %>%
add_recipe(UFC_Recipe)
UFC_NN_Tune <- grid_regular(
hidden_units(range = c(10, 100)),
penalty(range = c(0, 1)),
epochs(range = c(50, 500)),
levels = 5
)
UFC_NN_Fit <- tune_grid(
UFC_NN_Workflow,
resamples = UFC_Folds,
grid = UFC_NN_Tune,
)
save(UFC_NN_Fit, file = "UFC_NN_Fit.rda")
arrange(filter(collect_metrics(UFC_NN_Fit), .metric == "roc_auc"), mean)
install.packages("nnet")
install.packages("nnet")
install.packages("nnet")
knitr::opts_chunk$set(echo = TRUE)
install.packages("nnet")
install.packages("nnet")
knitr::opts_chunk$set(echo = TRUE)
library(nnet) #For Neural Network Model
library(nnet) #For Neural Network Model
install.packages("nnet")
install.packages("nnet")
knitr::opts_chunk$set(echo = TRUE)
detach("package:nnet", unload = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
View(original)
View(UFC_Original)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#List of libraries/packages used
library(tidyverse) #Main one
library(tidymodels) #Main one
library(dplyr) #for more R functionality
library(caret) #More R functionality
library(ggplot2) #for plotting
library(corrplot) #For correlation matrix
library(kableExtra) #for scrolling feature on tables when knit
library(parsnip)#helps run models
library(discrim)#helps run models
library(randomForest) #For Random Forest Model
library(xgboost) #For Boosted Tree Model
library(keras) #For Neural Network Model
UFC_Original <- read.csv("C:/Users/Angel/OneDrive/Desktop/schoolwork/1. Pstat 131/Project/Data_Folder/ufc-master.csv", header=TRUE, stringsAsFactors=FALSE, sep=',')
UFC_Short <- UFC_Original[1:10,]
kable(UFC_Short) %>%
kable_styling("striped", full_width = F) %>%
scroll_box(width = "100%", height = "200px")
# Submit this only in the final project because it takes too long to load
dim(UFC_Original)
UFC_Main <- UFC_Original[, c(3, 4, 10, 13:25, 27:31, 33:36, 38:48, 50:54, 56:59, 61, 62, 78, 108, 109, 111, 70:77)]
View(UFC_Original)
#include 12 if you want weight class
dim(UFC_Main)
sum(is.na(UFC_Main)) #less than 3 percent of data is missing
null_Percentage <- sapply(UFC_Main, function(x) sum(is.na(x))/length(x))*100
null_Columns <- null_Percentage[null_Percentage > 0]
null_df <- as.data.frame(null_Columns)
null_Columns
ggplot(null_df, aes(x = rownames(null_df), y = null_df[,1])) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
xlab("Columns with null values") +
ylab("Percent of column that is null")
nullValues <- apply(UFC_Main, 1, function(x) sum(is.na(x)))
filteredUFC <- UFC_Main[nullValues < 10, ]
sum(is.na(filteredUFC))
# Impute missing values
UFC_NoNull <- filteredUFC %>%
mutate(across(where(is.numeric), ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)),
across(where(is.factor), ~ ifelse(is.na(.), as.factor(get_mode(.)), .)))
sum(is.na(UFC_NoNull))
UFC_numeric <- select_if(UFC_NoNull, is.numeric)
UFC_cor <- cor(UFC_numeric)
corr_simple <- function(data=df,sig=0.5){
UFC_cor[lower.tri(UFC_cor,diag=TRUE)] <- NA
UFC_cor[UFC_cor == 1] <- NA
UFC_cor <- as.data.frame(as.table(UFC_cor))
UFC_cor <- na.omit(UFC_cor)
UFC_cor <- subset(UFC_cor, abs(Freq) > sig)
UFC_cor <- UFC_cor[order(-abs(UFC_cor$Freq)),]
print(UFC_cor)
UFC_cormx <- reshape2::acast(UFC_cor, Var1~Var2, value.var="Freq")
corrplot(UFC_cormx, is.corr=FALSE, tl.col="black", na.label=" ")
}
corr_simple()
ggplot(UFC_NoNull, aes(x = Winner)) +
geom_bar() +
geom_text(aes(label=..count..),stat='count',position=position_dodge(0.9),vjust=-0.2)
character_Vars <- UFC_NoNull %>% select_if(where(function(col) is.factor(col) | is.character(col) )) %>% names()
character_Vars
set.seed(1)
UFC_Split <- initial_split(UFC_Main, strata = "Winner")
UFC_Train <- training(UFC_Split)
UFC_Test <- testing(UFC_Split)
dim(UFC_Train)
dim(UFC_Test)
ggplot(UFC_Train, aes(x = Winner)) +
geom_bar() +
geom_text(aes(label=..count..),stat='count',position=position_dodge(0.9),vjust=-0.2)
ggplot(UFC_Test, aes(x = Winner)) +
geom_bar() +
geom_text(aes(label=..count..),stat='count',position=position_dodge(0.9),vjust=-0.2)
UFC_Folds <- vfold_cv(UFC_Train, v = 5, strata = "Winner")
numeric_predictors <- names(UFC_Train) %>%
keep(~ is.numeric(UFC_Train[[.]]))
categorical_predictors <- names(UFC_Train) %>%
keep(~ is.factor(UFC_Train[[.]]) | is.character(UFC_Train[[.]]))
UFC_Recipe <- recipe(Winner ~ ., data = UFC_Train) %>%
step_impute_linear(numeric_predictors) %>%
#  step_impute_mode(categorical_predictors) %>%
step_dummy(gender, B_Stance, R_Stance, better_rank, finish) %>%
step_interact(~ R_odds:B_odds) %>%
step_interact(~ B_total_rounds_fought:B_wins) %>%
step_center(all_predictors()) %>%
step_scale(all_predictors())
UFC_Logistic_Spec <- logistic_reg(penalty = 0, mixture = tune()) %>%
set_engine("glmnet") %>%
set_mode("classification")
UFC_Logistic_Workflow <- workflow() %>%
add_model(UFC_Logistic_Spec) %>%
add_recipe(UFC_Recipe)
UFC_Logistic_Tune <- grid_regular(
mixture(range = c(0.05, 1)),
levels = 5
)
UFC_Logistic_Fit <- tune_grid(
UFC_Logistic_Workflow,
resamples = UFC_Folds,
grid = UFC_Logistic_Tune,
)
UFC_Logistic_Spec <- logistic_reg(penalty = tune(), mixture = tune()) %>%
set_engine("glmnet") %>%
set_mode("classification")
UFC_Logistic_Workflow <- workflow() %>%
add_model(UFC_Logistic_Spec) %>%
add_recipe(UFC_Recipe)
UFC_Logistic_Tune <- grid_regular(
penalty(range = c(0.000, 1)),
mixture(range = c(0.05, 1)),
levels = 5
)
UFC_Logistic_Fit <- tune_grid(
UFC_Logistic_Workflow,
resamples = UFC_Folds,
grid = UFC_Logistic_Tune,
)
save(UFC_Logistic_Fit, file = "UFC_Logistic_Fit.rda")
#Best parameters are Penalty = 1.781353 and Mixture = 0.05
arrange(filter(collect_metrics(UFC_Logistic_Fit), .metric == "roc_auc"), desc(mean))
